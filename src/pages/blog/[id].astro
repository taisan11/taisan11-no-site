---
import { getCollection, render } from 'astro:content';
import Layout from "../../layouts/layout.astro";
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { id: post.id },
    props: { post },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { post } = Astro.props;
const { Content, headings } = await render(post);
---

<Layout>
  <div class="meta">
    <h1>{post.data.title}</h1>
    <div>
      <p class="date">{post.data.date!.toLocaleDateString("ja-JP",{ year: 'numeric', month: 'long', day: 'numeric' })}</p>
    </div>
    <details style="margin-bottom:1rem;display:inline-block;">
      <summary style="cursor:pointer; font-size:1rem;">目次を表示</summary>
      <div style="background:rgb(8, 39, 76); color:#fff; max-width:400px; margin:1rem auto; padding:1rem; border-radius:8px; text-align:left;">
        <h2 style="margin-top:0;">目次</h2>
        <ul style="padding-left:0;">
          {headings?.map(item => (
        <li class="toc-youso" style={`margin-left:${(item.depth-2)*1.5}em;position:relative;padding-left:1em;`}>
          <a href={`#${item.slug}`}>{item.text}</a>
        </li>
          ))}
        </ul>
      </div>
    </details>
  </div>
  <article class="prose col-start-2 max-w-none">
    <Content />
  </article>
</Layout>

<script>
  const tocToggle = document.getElementById('toc-toggle');
    const tocModal = document.getElementById('toc-modal');
    const tocClose = document.getElementById('toc-close');
    tocToggle?.addEventListener('click', () => tocModal!.style.display = 'block');
    tocClose?.addEventListener('click', () => tocModal!.style.display = 'none');
    tocModal?.addEventListener('click', e => {
      if (e.target === tocModal) tocModal!.style.display = 'none';
    });
</script>

<style is:global>
  .meta {
    text-align: center;
    margin-bottom: 0.5rem;
    h1 {
      font-size: 2rem;
      font-weight: bold;
      margin:0;
    }
    .date {
      font-size: 1rem;
      color: #b8b8b8;
    }

    .toc-youso {
      margin-left: 1.5em;
      list-style: none;
    }
  }
  :root {
    color:aliceblue;
  }
  article {
    margin: 2rem 0;
    font-size: 110%;
    /* letter-spacing: 0.02em; */
    word-break: keep-all;
    /* line-height: 1.6; */
  }
  @media (orientation: landscape) {
    article {
      margin: auto 25vw;
    }
  }
  h2 a, h3 a, h4 a {
  position: relative;
  text-decoration: none;
  color: inherit;
  }

  h2 a::before, h3 a::before, h4 a::before {
    content: "🔗"; /* 好きなアイコンに変更可 */
    position: absolute;
    left: -1.5em;   /* 見出しの左側に配置 */
    opacity: 0;     /* 普段は非表示 */
    transition: opacity 0.2s;
  }

  h2 a:hover::before,
  h3 a:hover::before,
  h4 a:hover::before {
    opacity: 1;     /* hover 時に表示 */
  }
</style>